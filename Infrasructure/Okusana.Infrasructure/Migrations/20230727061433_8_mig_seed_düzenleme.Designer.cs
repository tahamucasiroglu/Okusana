// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Okusana.Infrasructure.Contexts.PgContext;

#nullable disable

namespace Okusana.Infrasructure.Migrations
{
    [DbContext(typeof(OkusanaPgContext))]
    [Migration("20230727061433_8_mig_seed_düzenleme")]
    partial class _8_mig_seed_düzenleme
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("Turkish_Turkey.1254")
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BlogHashTag", b =>
                {
                    b.Property<Guid>("BlogsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("HashTagsId")
                        .HasColumnType("uuid");

                    b.HasKey("BlogsId", "HashTagsId");

                    b.HasIndex("HashTagsId");

                    b.ToTable("BlogHashTag");
                });

            modelBuilder.Entity("Okusana.Entities.Base.Entity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("Okusana.Entities.Concrete.Blog", b =>
                {
                    b.HasBaseType("Okusana.Entities.Base.Entity");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("text")
                        .HasComment("blog gövdesi 3000 karakter sınırı var");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("boolean")
                        .HasComment("yayınlanma durumunu verir");

                    b.Property<DateTime?>("PublicationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("isteğe bağlı yayınlanma tarihi");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("character varying(150)")
                        .HasComment("Blog başlığı 150 karakter sınırı var");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.HasIndex("Title", "IsPublished", "CreateDate", "IsDeleted");

                    b.ToTable("Blogs", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("1aee5088-c4da-4f97-955a-f53092970988"),
                            CreateDate = new DateTime(2023, 7, 27, 6, 14, 33, 216, DateTimeKind.Utc).AddTicks(5303),
                            IsDeleted = false,
                            CategoryId = new Guid("982ec29b-8ac0-4274-80b1-5f9f39714c25"),
                            Content = "Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem ",
                            IsPublished = true,
                            Title = "amatör Futboll",
                            UserId = new Guid("2f90329e-0084-4c4a-a507-c384cf79213c")
                        },
                        new
                        {
                            Id = new Guid("1f1e00a1-b237-4eff-99d2-641a961fff2f"),
                            CreateDate = new DateTime(2023, 7, 27, 6, 14, 33, 216, DateTimeKind.Utc).AddTicks(5357),
                            IsDeleted = false,
                            CategoryId = new Guid("5bec5d9a-3432-4550-b132-d6d5d791a7f6"),
                            Content = "Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem ",
                            IsPublished = true,
                            Title = "Futboll süper",
                            UserId = new Guid("a4e760a9-d3e9-41b9-809c-acf00822e5f7")
                        },
                        new
                        {
                            Id = new Guid("b12032c3-506c-4528-8969-65b67f42c15a"),
                            CreateDate = new DateTime(2023, 7, 27, 6, 14, 33, 216, DateTimeKind.Utc).AddTicks(5372),
                            IsDeleted = false,
                            CategoryId = new Guid("b6477090-abe3-4be0-bf25-8da01170297a"),
                            Content = "Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem Lorem ",
                            IsPublished = true,
                            Title = "basket genel",
                            UserId = new Guid("2f90329e-0084-4c4a-a507-c384cf79213c")
                        });
                });

            modelBuilder.Entity("Okusana.Entities.Concrete.Category", b =>
                {
                    b.HasBaseType("Okusana.Entities.Base.Entity");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("character varying(150)")
                        .HasComment("category aciklamasi");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)")
                        .HasComment("kategori adlari");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.HasIndex("ParentId");

                    b.HasIndex("Name", "CreateDate", "IsDeleted");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("78332ec4-d928-4615-b67a-9ab0ca1e94b3"),
                            CreateDate = new DateTime(2023, 7, 27, 6, 14, 33, 216, DateTimeKind.Utc).AddTicks(4820),
                            IsDeleted = false,
                            Description = "Spor türündeki kategorileri içerir",
                            Name = "Spor"
                        },
                        new
                        {
                            Id = new Guid("7a4bf1cd-6e44-4ba0-a5dd-1aa934e5405d"),
                            CreateDate = new DateTime(2023, 7, 27, 6, 14, 33, 216, DateTimeKind.Utc).AddTicks(4828),
                            IsDeleted = false,
                            Description = "Futbol yazıları",
                            Name = "Futbol",
                            ParentId = new Guid("78332ec4-d928-4615-b67a-9ab0ca1e94b3")
                        },
                        new
                        {
                            Id = new Guid("b6477090-abe3-4be0-bf25-8da01170297a"),
                            CreateDate = new DateTime(2023, 7, 27, 6, 14, 33, 216, DateTimeKind.Utc).AddTicks(4831),
                            IsDeleted = false,
                            Description = "Basketbol yazıları",
                            Name = "Basketbol",
                            ParentId = new Guid("78332ec4-d928-4615-b67a-9ab0ca1e94b3")
                        },
                        new
                        {
                            Id = new Guid("982ec29b-8ac0-4274-80b1-5f9f39714c25"),
                            CreateDate = new DateTime(2023, 7, 27, 6, 14, 33, 216, DateTimeKind.Utc).AddTicks(4832),
                            IsDeleted = false,
                            Description = "Amatör futbol ligi",
                            Name = "Amatör Lig",
                            ParentId = new Guid("7a4bf1cd-6e44-4ba0-a5dd-1aa934e5405d")
                        },
                        new
                        {
                            Id = new Guid("5bec5d9a-3432-4550-b132-d6d5d791a7f6"),
                            CreateDate = new DateTime(2023, 7, 27, 6, 14, 33, 216, DateTimeKind.Utc).AddTicks(4834),
                            IsDeleted = false,
                            Description = "Süperlig yazıları",
                            Name = "Süperlig",
                            ParentId = new Guid("7a4bf1cd-6e44-4ba0-a5dd-1aa934e5405d")
                        },
                        new
                        {
                            Id = new Guid("a0dc2bf5-ebce-4f11-959b-14b3482fb9e6"),
                            CreateDate = new DateTime(2023, 7, 27, 6, 14, 33, 216, DateTimeKind.Utc).AddTicks(4837),
                            IsDeleted = false,
                            Description = "Türkiye baskett yazıları",
                            Name = "Türkiye",
                            ParentId = new Guid("b6477090-abe3-4be0-bf25-8da01170297a")
                        },
                        new
                        {
                            Id = new Guid("31ad48b2-024e-4c15-bac7-709232e0e085"),
                            CreateDate = new DateTime(2023, 7, 27, 6, 14, 33, 216, DateTimeKind.Utc).AddTicks(4839),
                            IsDeleted = false,
                            Description = "NBA basket yazıları",
                            Name = "NBA",
                            ParentId = new Guid("b6477090-abe3-4be0-bf25-8da01170297a")
                        },
                        new
                        {
                            Id = new Guid("cc1ab466-e4c0-4e19-9735-2fbb455239c2"),
                            CreateDate = new DateTime(2023, 7, 27, 6, 14, 33, 216, DateTimeKind.Utc).AddTicks(4841),
                            IsDeleted = false,
                            Description = "Teknoloji yazıları içerir",
                            Name = "Teknoloji"
                        },
                        new
                        {
                            Id = new Guid("09cdc7ba-1d46-4ec5-8491-e4c9e68fb45c"),
                            CreateDate = new DateTime(2023, 7, 27, 6, 14, 33, 216, DateTimeKind.Utc).AddTicks(4842),
                            IsDeleted = false,
                            Description = "Bilgisayar yazıları",
                            Name = "Bilgisayar",
                            ParentId = new Guid("cc1ab466-e4c0-4e19-9735-2fbb455239c2")
                        },
                        new
                        {
                            Id = new Guid("c57fbd94-8ae1-4727-a770-d69b224e52da"),
                            CreateDate = new DateTime(2023, 7, 27, 6, 14, 33, 216, DateTimeKind.Utc).AddTicks(4844),
                            IsDeleted = false,
                            Description = "Laptop yazıları",
                            Name = "Laptop",
                            ParentId = new Guid("cc1ab466-e4c0-4e19-9735-2fbb455239c2")
                        },
                        new
                        {
                            Id = new Guid("010fa2a1-fa76-4111-9952-7a552a695ce5"),
                            CreateDate = new DateTime(2023, 7, 27, 6, 14, 33, 216, DateTimeKind.Utc).AddTicks(4846),
                            IsDeleted = false,
                            Description = "Ekran kartı yazıları",
                            Name = "Ekran kartı",
                            ParentId = new Guid("09cdc7ba-1d46-4ec5-8491-e4c9e68fb45c")
                        },
                        new
                        {
                            Id = new Guid("e509a993-a291-45de-bcc7-0d05e0ed34bd"),
                            CreateDate = new DateTime(2023, 7, 27, 6, 14, 33, 216, DateTimeKind.Utc).AddTicks(4847),
                            IsDeleted = false,
                            Description = "İşlemci yazıları",
                            Name = "İşlemci",
                            ParentId = new Guid("09cdc7ba-1d46-4ec5-8491-e4c9e68fb45c")
                        },
                        new
                        {
                            Id = new Guid("ee53a64f-8966-486a-bf7c-01e8ac26746b"),
                            CreateDate = new DateTime(2023, 7, 27, 6, 14, 33, 216, DateTimeKind.Utc).AddTicks(4849),
                            IsDeleted = false,
                            Description = "Amiral gemisi telefon yazıları",
                            Name = "Amiral gemisi telefon",
                            ParentId = new Guid("c57fbd94-8ae1-4727-a770-d69b224e52da")
                        },
                        new
                        {
                            Id = new Guid("9244478d-cd75-4e31-93ab-fd808f655bee"),
                            CreateDate = new DateTime(2023, 7, 27, 6, 14, 33, 216, DateTimeKind.Utc).AddTicks(4851),
                            IsDeleted = false,
                            Description = "Orta segment telefon yazıları",
                            Name = "Orta segment telefon",
                            ParentId = new Guid("c57fbd94-8ae1-4727-a770-d69b224e52da")
                        });
                });

            modelBuilder.Entity("Okusana.Entities.Concrete.Comment", b =>
                {
                    b.HasBaseType("Okusana.Entities.Base.Entity");

                    b.Property<Guid>("BlogId")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("text")
                        .HasComment("kullanıcı yorum yazısı");

                    b.Property<bool>("IsLike")
                        .HasColumnType("boolean")
                        .HasComment("kullanıcı beğenme durumu");

                    b.Property<int?>("Rate")
                        .HasColumnType("integer")
                        .HasComment("kullanıcı puan değeri 5 üzerinden olur bir değişiklik olmazsa");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasIndex("BlogId");

                    b.HasIndex("UserId");

                    b.HasIndex("Rate", "IsLike", "CreateDate", "IsDeleted");

                    b.ToTable("Comments", (string)null);
                });

            modelBuilder.Entity("Okusana.Entities.Concrete.HashTag", b =>
                {
                    b.HasBaseType("Okusana.Entities.Base.Entity");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)")
                        .HasComment("etiket ismi");

                    b.HasIndex("Name", "CreateDate", "IsDeleted");

                    b.ToTable("HashTags", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("2960c0c2-ca47-4ce6-93e1-0eb146a08a98"),
                            CreateDate = new DateTime(2023, 7, 27, 6, 14, 33, 216, DateTimeKind.Utc).AddTicks(5273),
                            IsDeleted = false,
                            Name = "Top"
                        },
                        new
                        {
                            Id = new Guid("431ffa84-e935-4f16-b1c3-28293af8e055"),
                            CreateDate = new DateTime(2023, 7, 27, 6, 14, 33, 216, DateTimeKind.Utc).AddTicks(5275),
                            IsDeleted = false,
                            Name = "Spor"
                        },
                        new
                        {
                            Id = new Guid("da6cb33b-a16f-4300-a736-5559d73666ba"),
                            CreateDate = new DateTime(2023, 7, 27, 6, 14, 33, 216, DateTimeKind.Utc).AddTicks(5276),
                            IsDeleted = false,
                            Name = "Teknoloji"
                        },
                        new
                        {
                            Id = new Guid("63e6efc0-7adb-40ed-857b-9ed1ab86411f"),
                            CreateDate = new DateTime(2023, 7, 27, 6, 14, 33, 216, DateTimeKind.Utc).AddTicks(5277),
                            IsDeleted = false,
                            Name = "Modern"
                        },
                        new
                        {
                            Id = new Guid("40fe298e-3e48-428d-8c6e-8ad47fa3502b"),
                            CreateDate = new DateTime(2023, 7, 27, 6, 14, 33, 216, DateTimeKind.Utc).AddTicks(5278),
                            IsDeleted = false,
                            Name = "Saha"
                        },
                        new
                        {
                            Id = new Guid("5c5dacb4-d3d6-43d9-b4a1-818c2595ab6b"),
                            CreateDate = new DateTime(2023, 7, 27, 6, 14, 33, 216, DateTimeKind.Utc).AddTicks(5279),
                            IsDeleted = false,
                            Name = "Kasa"
                        },
                        new
                        {
                            Id = new Guid("c686021c-c05b-412a-9407-d7fffaec27ac"),
                            CreateDate = new DateTime(2023, 7, 27, 6, 14, 33, 216, DateTimeKind.Utc).AddTicks(5281),
                            IsDeleted = false,
                            Name = "Laptop"
                        },
                        new
                        {
                            Id = new Guid("e9b8ee87-d7a6-4430-b2be-f6f85e5ab4ff"),
                            CreateDate = new DateTime(2023, 7, 27, 6, 14, 33, 216, DateTimeKind.Utc).AddTicks(5282),
                            IsDeleted = false,
                            Name = "Samsung"
                        },
                        new
                        {
                            Id = new Guid("4cf1e41f-45ff-4b36-9b6b-c8ff750c5d2e"),
                            CreateDate = new DateTime(2023, 7, 27, 6, 14, 33, 216, DateTimeKind.Utc).AddTicks(5283),
                            IsDeleted = false,
                            Name = "Iphone"
                        });
                });

            modelBuilder.Entity("Okusana.Entities.Concrete.User", b =>
                {
                    b.HasBaseType("Okusana.Entities.Base.Entity");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("date")
                        .HasComment("Üyelerin doğum tarihleri");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)")
                        .HasComment("Üyelerin mail adresleri");

                    b.Property<bool?>("Gender")
                        .HasColumnType("boolean")
                        .HasComment("Üyelerin cinsiyetleri false erkek true kadın null belirtmek istemiyorum");

                    b.Property<string>("IdentityNumber")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("character varying(11)")
                        .HasComment("Üyelerin kimlik nuamraları");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)")
                        .HasComment("Üyelerin isimleri");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("character varying(64)")
                        .HasComment("Üyelerin şifreleri sha 256 alınacak");

                    b.Property<string>("Phone")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasComment("Üyelerin telefon numaraları");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasComment("Üyelerin rütbeleri");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)")
                        .HasComment("Üyelerin soy isimleri");

                    b.HasIndex("Id", "Email", "CreateDate", "IsDeleted");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2f90329e-0084-4c4a-a507-c384cf79213c"),
                            CreateDate = new DateTime(2023, 7, 27, 6, 14, 33, 216, DateTimeKind.Utc).AddTicks(4939),
                            IsDeleted = false,
                            BirthDate = new DateTime(2003, 7, 27, 6, 14, 33, 216, DateTimeKind.Utc).AddTicks(4944),
                            Email = "ataha@gmail.com",
                            Gender = false,
                            Name = "Admin Taha",
                            Password = "8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92",
                            Status = "Admin",
                            Surname = "mücasiroğlu"
                        },
                        new
                        {
                            Id = new Guid("a4e760a9-d3e9-41b9-809c-acf00822e5f7"),
                            CreateDate = new DateTime(2023, 7, 27, 6, 14, 33, 216, DateTimeKind.Utc).AddTicks(5195),
                            IsDeleted = false,
                            BirthDate = new DateTime(1993, 7, 27, 6, 14, 33, 216, DateTimeKind.Utc).AddTicks(5197),
                            Email = "etaha@gmail.com",
                            Gender = false,
                            Name = "Editor Taha",
                            Password = "8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92",
                            Status = "Editor",
                            Surname = "mücasiroğlu"
                        },
                        new
                        {
                            Id = new Guid("678ba915-a2c6-40c9-9ccf-50348249632b"),
                            CreateDate = new DateTime(2023, 7, 27, 6, 14, 33, 216, DateTimeKind.Utc).AddTicks(5243),
                            IsDeleted = false,
                            BirthDate = new DateTime(1983, 7, 27, 6, 14, 33, 216, DateTimeKind.Utc).AddTicks(5245),
                            Email = "mtaha@gmail.com",
                            Gender = false,
                            Name = "Member Taha",
                            Password = "8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92",
                            Status = "Member",
                            Surname = "mücasiroğlu"
                        });
                });

            modelBuilder.Entity("BlogHashTag", b =>
                {
                    b.HasOne("Okusana.Entities.Concrete.Blog", null)
                        .WithMany()
                        .HasForeignKey("BlogsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Okusana.Entities.Concrete.HashTag", null)
                        .WithMany()
                        .HasForeignKey("HashTagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Okusana.Entities.Concrete.Blog", b =>
                {
                    b.HasOne("Okusana.Entities.Concrete.Category", "Category")
                        .WithMany("Blogs")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Blogs_Categories");

                    b.HasOne("Okusana.Entities.Concrete.User", "User")
                        .WithMany("Blogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Blogs_Users");

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Okusana.Entities.Concrete.Category", b =>
                {
                    b.HasOne("Okusana.Entities.Concrete.Category", "ParentCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_Categories_Categories");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("Okusana.Entities.Concrete.Comment", b =>
                {
                    b.HasOne("Okusana.Entities.Concrete.Blog", "Blog")
                        .WithMany("Comments")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Comment_Blog");

                    b.HasOne("Okusana.Entities.Concrete.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Comment_User");

                    b.Navigation("Blog");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Okusana.Entities.Concrete.Blog", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("Okusana.Entities.Concrete.Category", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("Okusana.Entities.Concrete.User", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("Comments");
                });
#pragma warning restore 612, 618
        }
    }
}
